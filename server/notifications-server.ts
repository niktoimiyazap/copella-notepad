import { WebSocketServer, WebSocket } from 'ws';
import http from 'http';

const PORT = process.env.NOTIFICATIONS_PORT || 3001;

// –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
export type NotificationType = 
  | 'invite:created'
  | 'invite:accepted'
  | 'approval:request'
  | 'approval:response'
  | 'participant:update'
  | 'ownership:transfer';

export interface NotificationMessage {
  type: NotificationType;
  roomId: string;
  data: any;
  timestamp: number;
}

// –•—Ä–∞–Ω–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
const roomConnections = new Map<string, Set<WebSocket>>();
const userRooms = new Map<WebSocket, Set<string>>();

// –°–æ–∑–¥–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º POST –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è broadcast'–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  if (req.method === 'POST' && req.url === '/broadcast') {
    let body = '';
    
    req.on('data', chunk => {
      body += chunk.toString();
    });
    
    req.on('end', () => {
      try {
        const notification: NotificationMessage = JSON.parse(body);
        broadcastToRoom(notification.roomId, notification);
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ success: true }));
      } catch (error) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Invalid request' }));
      }
    });
  } else {
    res.writeHead(404);
    res.end('Not Found');
  }
});

// WebSocket —Å–µ—Ä–≤–µ—Ä
const wss = new WebSocketServer({ server });

console.log(`[Notifications] üîî Server started on port ${PORT}`);

wss.on('connection', (ws: WebSocket) => {
  console.log('[Notifications] üë§ New connection');
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Set –∫–æ–º–Ω–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  userRooms.set(ws, new Set());

  ws.on('message', (message: string) => {
    try {
      const data = JSON.parse(message.toString());
      
      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–æ–º–Ω–∞—Ç—É
      if (data.type === 'subscribe' && data.roomId) {
        const roomId = data.roomId;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        if (!roomConnections.has(roomId)) {
          roomConnections.set(roomId, new Set());
        }
        roomConnections.get(roomId)!.add(ws);
        userRooms.get(ws)!.add(roomId);
        
        console.log(`[Notifications] ‚úÖ User subscribed to room: ${roomId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        ws.send(JSON.stringify({
          type: 'subscribed',
          roomId,
          timestamp: Date.now()
        }));
      }
      
      // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –∫–æ–º–Ω–∞—Ç—ã
      else if (data.type === 'unsubscribe' && data.roomId) {
        const roomId = data.roomId;
        
        roomConnections.get(roomId)?.delete(ws);
        userRooms.get(ws)?.delete(roomId);
        
        console.log(`[Notifications] ‚ùå User unsubscribed from room: ${roomId}`);
      }
    } catch (error) {
      console.error('[Notifications] ‚ùå Error processing message:', error);
    }
  });

  ws.on('close', () => {
    console.log('[Notifications] üëã Connection closed');
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
    const rooms = userRooms.get(ws);
    if (rooms) {
      rooms.forEach(roomId => {
        roomConnections.get(roomId)?.delete(ws);
      });
      userRooms.delete(ws);
    }
  });

  ws.on('error', (error) => {
    console.error('[Notifications] ‚ùå WebSocket error:', error);
  });
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∫–æ–º–Ω–∞—Ç—ã
export function broadcastToRoom(roomId: string, notification: NotificationMessage) {
  const connections = roomConnections.get(roomId);
  
  if (!connections || connections.size === 0) {
    console.log(`[Notifications] üì≠ No subscribers for room: ${roomId}`);
    return;
  }
  
  const message = JSON.stringify({
    ...notification,
    timestamp: Date.now()
  });
  
  let sentCount = 0;
  connections.forEach(ws => {
    if (ws.readyState === WebSocket.OPEN) {
      ws.send(message);
      sentCount++;
    }
  });
  
  console.log(`[Notifications] üì® Sent notification to ${sentCount} users in room: ${roomId}`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä
server.listen(PORT, () => {
  console.log(`[Notifications] üöÄ HTTP server started on port ${PORT}`);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('[Notifications] üõë Received SIGTERM, shutting down gracefully...');
  server.close(() => {
    wss.close(() => {
      console.log('[Notifications] ‚úÖ Server closed');
      process.exit(0);
    });
  });
});
