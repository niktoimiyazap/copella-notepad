/**
 * YJS WebSocket —Å–µ—Ä–≤–µ—Ä —Å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é –≤ PostgreSQL
 * –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 1234
 */

import { WebSocketServer } from 'ws';
import * as Y from 'yjs';
import { loadYjsDocument, saveYjsUpdate } from './yjs-persistence';

const PORT = process.env.YJS_WS_PORT || 1234;

// –ö–µ—à –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏ (–¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
const docs = new Map<string, Y.Doc>();

// –°–æ–∑–¥–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º —Å–∂–∞—Ç–∏–µ–º
const wss = new WebSocketServer({ 
  port: Number(PORT),
  perMessageDeflate: {
    zlibDeflateOptions: {
      chunkSize: 1024,
      memLevel: 8,
      level: 6
    },
    zlibInflateOptions: {
      chunkSize: 10 * 1024
    },
    clientNoContextTakeover: true,
    serverNoContextTakeover: true,
    serverMaxWindowBits: 15,
    concurrencyLimit: 10,
    threshold: 256
  }
});

console.log(`[Yjs WebSocket] üöÄ Server started on port ${PORT} with PostgreSQL persistence`);

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç YJS –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∑–∞–º–µ—Ç–∫–∏
 */
async function getOrCreateDoc(noteId: string): Promise<Y.Doc> {
  let ydoc = docs.get(noteId);
  
  if (!ydoc) {
    console.log(`[Yjs] Loading document from DB: ${noteId}`);
    ydoc = await loadYjsDocument(noteId);
    docs.set(noteId, ydoc);
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
    ydoc.on('update', (update: Uint8Array) => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
      saveYjsUpdate(noteId, update).catch(err => 
        console.error(`[Yjs] Error saving update for ${noteId}:`, err)
      );
    });
    
    // –û—á–∏—â–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ 10 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    setTimeout(() => {
      if (ydoc && ydoc.conns?.size === 0) {
        docs.delete(noteId);
        console.log(`[Yjs] Removed inactive document from memory: ${noteId}`);
      }
    }, 10 * 60 * 1000);
  }
  
  return ydoc;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ @y/websocket-server)
wss.on('connection', async (ws, req) => {
  const noteId = req.url?.slice(1) || 'default';
  console.log(`[Yjs] Client connected to note: ${noteId}`);
  
  try {
    const ydoc = await getOrCreateDoc(noteId);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    const syncMessage = Y.encodeStateAsUpdate(ydoc);
    ws.send(syncMessage);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    ws.on('message', (data: Buffer) => {
      try {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑–æ–≤–µ—Ç —Å–æ–±—ã—Ç–∏–µ 'update')
        Y.applyUpdate(ydoc, new Uint8Array(data));
        
        // –†–∞—Å—Å—ã–ª–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        wss.clients.forEach(client => {
          if (client !== ws && client.readyState === 1) {
            client.send(data);
          }
        });
      } catch (error) {
        console.error('[Yjs] Error processing update:', error);
      }
    });
    
    ws.on('close', () => {
      console.log(`[Yjs] Client disconnected from note: ${noteId}`);
    });
    
  } catch (error) {
    console.error(`[Yjs] Error setting up connection for ${noteId}:`, error);
    ws.close();
  }
});

wss.on('error', (error) => {
  console.error('[Yjs WebSocket] Error:', error);
});

// Graceful shutdown
const shutdown = () => {
  console.log('[Yjs WebSocket] Shutting down...');
  
  wss.close(() => {
    console.log('[Yjs WebSocket] Closed');
    process.exit(0);
  });
  
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
  setTimeout(() => {
    console.log('[Yjs WebSocket] Forcing shutdown...');
    process.exit(1);
  }, 5000);
};

process.on('SIGTERM', shutdown);
process.on('SIGINT', shutdown);

