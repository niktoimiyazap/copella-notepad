#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub Secrets
# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GitHub Secrets –¥–ª—è –∞–≤—Ç–æ–¥–µ–ø–ª–æ—è${NC}\n"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "package.json" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞${NC}"
    exit 1
fi

# GitHub —Ç–æ–∫–µ–Ω (–Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://github.com/settings/tokens)
echo -e "${BLUE}–ü–æ–ª—É—á–∏ GitHub Personal Access Token:${NC}"
echo "1. –û—Ç–∫—Ä–æ–π: https://github.com/settings/tokens/new"
echo "2. –ù–∞–∑–≤–∞–Ω–∏–µ: 'Copella Notepad Deploy'"
echo "3. –í—ã–±–µ—Ä–∏ —Å—Ä–æ–∫: '90 days' –∏–ª–∏ 'No expiration'"
echo "4. Permissions: –ø–æ—Å—Ç–∞–≤—å –≥–∞–ª–æ—á–∫—É 'repo' (full control)"
echo "5. –ù–∞–∂–º–∏ 'Generate token' –∏ —Å–∫–æ–ø–∏—Ä—É–π –µ–≥–æ"
echo ""
read -sp "–í—Å—Ç–∞–≤—å GitHub token: " GITHUB_TOKEN
echo ""

if [ -z "$GITHUB_TOKEN" ]; then
    echo -e "${RED}‚ùå –¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º${NC}"
    exit 1
fi

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
REPO_OWNER="niktoimiyazap"
REPO_NAME="copella-notepad"
SSH_KEY_PATH="$HOME/Downloads/Telegram Desktop/id_ed25519"

# –ß–∏—Ç–∞–µ–º SSH –∫–ª—é—á
if [ ! -f "$SSH_KEY_PATH" ]; then
    echo -e "${RED}‚ùå SSH –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: $SSH_KEY_PATH${NC}"
    exit 1
fi

SSH_KEY=$(cat "$SSH_KEY_PATH")

echo -e "${GREEN}‚úÖ SSH –∫–ª—é—á –ø—Ä–æ—á–∏—Ç–∞–Ω${NC}"

# –ü–æ–ª—É—á–∞–µ–º public key –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
echo -e "${BLUE}üì° –ü–æ–ª—É—á–∞–µ–º public key —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...${NC}"
PUBLIC_KEY_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
    "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/secrets/public-key")

PUBLIC_KEY=$(echo $PUBLIC_KEY_RESPONSE | grep -o '"key":"[^"]*' | cut -d'"' -f4)
KEY_ID=$(echo $PUBLIC_KEY_RESPONSE | grep -o '"key_id":"[^"]*' | cut -d'"' -f4)

if [ -z "$PUBLIC_KEY" ]; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è public key. –ü—Ä–æ–≤–µ—Ä—å —Ç–æ–∫–µ–Ω –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Public key –ø–æ–ª—É—á–µ–Ω${NC}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞
create_secret() {
    local SECRET_NAME=$1
    local SECRET_VALUE=$2
    
    echo -e "${BLUE}üîí –°–æ–∑–¥–∞—é —Å–µ–∫—Ä–µ—Ç: $SECRET_NAME...${NC}"
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º sodium –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è (—Ç—Ä–µ–±—É–µ—Ç libsodium)
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python
    python3 << EOF
import base64
import json
from nacl import encoding, public

def encrypt_secret(public_key: str, secret_value: str) -> str:
    public_key_bytes = base64.b64decode(public_key)
    sealed_box = public.SealedBox(public.PublicKey(public_key_bytes))
    encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
    return base64.b64encode(encrypted).decode("utf-8")

try:
    encrypted_value = encrypt_secret("$PUBLIC_KEY", """$SECRET_VALUE""")
    print(encrypted_value)
except Exception as e:
    print(f"ERROR: {e}")
    exit(1)
EOF
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Python –∏ PyNaCl
echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...${NC}"
if ! command -v python3 &> /dev/null; then
    echo -e "${RED}‚ùå Python 3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    exit 1
fi

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyNaCl –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if ! python3 -c "import nacl" 2>/dev/null; then
    echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é PyNaCl...${NC}"
    pip3 install PyNaCl --quiet
fi

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ —á–µ—Ä–µ–∑ API
add_secret() {
    local SECRET_NAME=$1
    local SECRET_VALUE=$2
    
    echo -e "${BLUE}üîê –î–æ–±–∞–≤–ª—è—é —Å–µ–∫—Ä–µ—Ç: $SECRET_NAME${NC}"
    
    # –®–∏—Ñ—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    ENCRYPTED_VALUE=$(python3 << EOF
import base64
from nacl import encoding, public

public_key_bytes = base64.b64decode("$PUBLIC_KEY")
sealed_box = public.SealedBox(public.PublicKey(public_key_bytes))
encrypted = sealed_box.encrypt("""$SECRET_VALUE""".encode("utf-8"))
print(base64.b64encode(encrypted).decode("utf-8"))
EOF
)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GitHub
    RESPONSE=$(curl -s -w "%{http_code}" -X PUT \
        -H "Authorization: token $GITHUB_TOKEN" \
        -H "Accept: application/vnd.github+json" \
        "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/actions/secrets/$SECRET_NAME" \
        -d "{\"encrypted_value\":\"$ENCRYPTED_VALUE\",\"key_id\":\"$KEY_ID\"}")
    
    HTTP_CODE="${RESPONSE: -3}"
    
    if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "204" ]; then
        echo -e "${GREEN}‚úÖ –°–µ–∫—Ä–µ—Ç $SECRET_NAME –¥–æ–±–∞–≤–ª–µ–Ω${NC}"
        return 0
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è $SECRET_NAME (HTTP $HTTP_CODE)${NC}"
        return 1
    fi
}

# –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã
echo ""
add_secret "VPS_HOST" "103.88.243.6"
add_secret "VPS_USERNAME" "vladikkrivolapovik"
add_secret "VPS_SSH_KEY" "$SSH_KEY"

echo ""
echo -e "${GREEN}üéâ –í—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!${NC}"
echo -e "${BLUE}‚ÑπÔ∏è  –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º push –≤ main –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ø–ª–æ–∏—Ç—å—Å—è WebSocket —Å–µ—Ä–≤–µ—Ä${NC}"

