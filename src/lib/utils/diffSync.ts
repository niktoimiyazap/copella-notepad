// Real-time collaborative editing client —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Yjs (CRDT)
import * as Y from 'yjs';
import { Awareness } from 'y-protocols/awareness';
import { IndexeddbPersistence } from 'y-indexeddb';
import { WebrtcProvider } from 'y-webrtc';
import { websocketClient } from '../websocket';
import { WebSocketBatcher } from './websocketBatcher';

export type ConnectionQuality = 'excellent' | 'good' | 'poor' | 'offline';

export interface CursorInfo {
  userId: string;
  username?: string;
  avatarUrl?: string;
  position: number;
  selection?: { start: number; end: number };
  color: string;
  timestamp: number;
  noteId?: string;
  connectionQuality?: ConnectionQuality; // –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  latency?: number; // RTT –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
}

// –î–µ—Ç–µ–∫—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
const isMobileDevice = (): boolean => {
  if (typeof window === 'undefined') return false;
  return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
    navigator.userAgent
  ) || window.matchMedia('(max-width: 768px)').matches;
};

interface DiffSyncOptions {
  noteId: string;
  roomId: string;
  onContentUpdate: (content: string) => void;
  onCursorsUpdate: (cursors: Map<string, CursorInfo>) => void;
  onSyncStatus: (status: 'connected' | 'syncing' | 'saved' | 'error') => void;
}

export class DiffSyncManager {
  private noteId: string;
  private roomId: string;
  private ydoc: Y.Doc;
  private ytext: Y.Text;
  private undoManager: Y.UndoManager;
  private awareness: Awareness;
  private indexeddbProvider: IndexeddbPersistence | null = null;
  private webrtcProvider: WebrtcProvider | null = null;
  private isActive = true;
  private isSyncing = false;
  private isInitialized = false;
  
  // Callbacks
  private onContentUpdate: (content: string) => void;
  private onCursorsUpdate: (cursors: Map<string, CursorInfo>) => void;
  private onSyncStatus: (status: 'connected' | 'syncing' | 'saved' | 'error') => void;
  
  // –ö—É—Ä—Å–æ—Ä—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private remoteCursors = new Map<string, CursorInfo>();
  
  // WebSocket (—Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, –Ω–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
  private messageHandler: ((message: any) => void) | null = null;

  // –ë–∞—Ç—á–∏–Ω–≥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö)
  private pendingContentUpdate: string | null = null;
  private contentUpdateTimeout: ReturnType<typeof setTimeout> | null = null;
  private isMobile: boolean = isMobileDevice();
  

  // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è (—Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
  private updateInProgress = false;
  

  // –¶–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private userColors = new Map<string, string>();
  private colorPalette = [
    '#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8',
    '#F7DC6F', '#BB8FCE', '#85C1E2', '#F8B739', '#52B788',
    '#E74C3C', '#3498DB', '#9B59B6', '#1ABC9C', '#F39C12',
    '#E67E22', '#16A085', '#27AE60', '#2980B9', '#8E44AD'
  ];

  constructor(options: DiffSyncOptions) {
    this.noteId = options.noteId;
    this.roomId = options.roomId;
    this.onContentUpdate = options.onContentUpdate;
    this.onCursorsUpdate = options.onCursorsUpdate;
    this.onSyncStatus = options.onSyncStatus;


    // –°–æ–∑–¥–∞–µ–º Yjs –¥–æ–∫—É–º–µ–Ω—Ç
    this.ydoc = new Y.Doc();
    this.ytext = this.ydoc.getText('content');

    // –°–æ–∑–¥–∞–µ–º Awareness –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.awareness = new Awareness(this.ydoc);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º IndexedDB –¥–ª—è offline-first –∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if (typeof window !== 'undefined') {
      this.indexeddbProvider = new IndexeddbPersistence(`copella-note-${this.noteId}`, this.ydoc);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebRTC –¥–ª—è P2P —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    // WebRTC –¥–∞–µ—Ç –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å 20-50ms (–≤ 5-10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ —á–µ–º WebSocket —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä)
    if (typeof window !== 'undefined') {
      try {
        this.webrtcProvider = new WebrtcProvider(
          `copella-room-${this.roomId}-note-${this.noteId}`, // –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–º–µ—Ç–∫–∏
          this.ydoc,
          {
            awareness: this.awareness,
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–í–û–ô signaling —Å–µ—Ä–≤–µ—Ä!
            signaling: [
              'wss://ws.copella.live/signaling'
            ],
            // STUN/TURN —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è NAT traversal
            peerOpts: {
              config: {
                iceServers: [
                  // Google –ø—É–±–ª–∏—á–Ω—ã–µ STUN —Å–µ—Ä–≤–µ—Ä—ã
                  { urls: 'stun:stun.l.google.com:19302' },
                  { urls: 'stun:stun1.l.google.com:19302' },
                  { urls: 'stun:stun2.l.google.com:19302' },
                  { urls: 'stun:stun3.l.google.com:19302' },
                  { urls: 'stun:stun4.l.google.com:19302' }
                ]
              }
            },
            // –ú–∞–∫—Å–∏–º—É–º –ø–∏—Ä–æ–≤ –¥–ª—è P2P (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
            maxConns: 20
          }
        );

        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è WebRTC –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        this.webrtcProvider.on('synced', () => {
          console.log('[WebRTC] ‚úÖ Synced with peers via P2P');
          this.isInitialized = true;
          this.onSyncStatus('connected');
        });

        this.webrtcProvider.on('peers', (event: { added: string[], removed: string[], webrtcPeers: string[] }) => {
          console.log(`[WebRTC] üîó ${event.webrtcPeers.length} peers connected (P2P)`);
          
          if (event.webrtcPeers.length > 0) {
            this.onSyncStatus('connected');
          }
        });

        console.log('[WebRTC] üöÄ P2P provider initialized (no WebSocket fallback)');
        
        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å—Ä–∞–∑—É
        this.isInitialized = true;
      } catch (error) {
        console.error('[WebRTC] ‚ùå Failed to initialize P2P:', error);
        this.webrtcProvider = null;
        this.onSyncStatus('error');
      }
    }

    // –°–æ–∑–¥–∞–µ–º Undo Manager —Å —É–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    this.undoManager = new Y.UndoManager(this.ytext, {
      trackedOrigins: new Set(['local']), // –û—Ç–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      captureTimeout: this.isMobile ? 800 : 500 // –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Yjs –¥–æ–∫—É–º–µ–Ω—Ç–µ
    // –í–ê–ñ–ù–û: –≤—ã–∑—ã–≤–∞–µ–º callback —Ç–æ–ª—å–∫–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (origin !== 'local')
    this.ytext.observe((event) => {
      if (this.isInitialized) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const transaction = event.transaction;
        const origin = transaction.origin;
        
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –æ–Ω–∏ —É–∂–µ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        if (origin === 'local') {
          return;
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        const content = this.ytext.toString();
        this.onContentUpdate(content);
        
        // –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä—ã –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞
        // –≠—Ç–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö
        this.handleAwarenessChange();
      }
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è Awareness –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–æ–≤
    // WebRTC –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç awareness, –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è—Ç—å UI
    this.awareness.on('change', () => {
      this.handleAwarenessChange();
    });

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ WebSocket —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    this.initializeWebSocketNotifications();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket —Ç–æ–ª—å–∫–æ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏)
   */
  private initializeWebSocketNotifications() {
    try {
      if (!websocketClient) {
        console.warn('[WebSocket] Client not available for notifications');
        return;
      }
      
      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î
      this.messageHandler = (message: any) => {
        if (message.type === 'note_saved' && message.data.noteId === this.noteId) {
          console.log('[WebSocket] ‚úÖ Note saved to database');
          this.onSyncStatus('saved');
          setTimeout(() => {
            if (this.isActive) {
              this.onSyncStatus('connected');
            }
          }, 2000);
        }
      };
      
      websocketClient.onMessage('note_saved', this.messageHandler);
      
      console.log('[WebSocket] üì¢ Listening for save notifications only');
    } catch (error) {
      console.error('[WebSocket] Notifications initialization error:', error);
      // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - WebRTC –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
   */
  private async requestSync() {
    if (!websocketClient) return;
    
    // –°–æ–∑–¥–∞–µ–º state vector –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö updates
    const stateVector = Y.encodeStateVector(this.ydoc);
    
    websocketClient.send({
      type: 'yjs_sync_request',
      room_id: this.roomId,
      data: {
        noteId: this.noteId,
        stateVector: Array.from(stateVector) // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Uint8Array –≤ –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è JSON
      }
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  private handleYjsSync(data: { noteId: string; update: number[] }) {
    if (data.noteId !== this.noteId) return;
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!data.update || !Array.isArray(data.update)) {
        this.onSyncStatus('error');
        return;
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ Uint8Array
      const update = new Uint8Array(data.update);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º update –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É (origin 'server' —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω–æ)
      Y.applyUpdate(this.ydoc, update, 'server');
      
      // –¢–µ–ø–µ—Ä—å –¥–æ–∫—É–º–µ–Ω—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω
      this.isInitialized = true;
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
      const content = this.ytext.toString();
      this.onContentUpdate(content);
    } catch (error) {
      // –ù–µ –≤—ã—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å error, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
      // –î–æ–∫—É–º–µ–Ω—Ç –º–æ–∂–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ updates
      this.isInitialized = true; // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private handleYjsUpdate(data: { noteId: string; update: number[] }) {
    if (data.noteId !== this.noteId) return;
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!data.update || !Array.isArray(data.update) || data.update.length === 0) {
        return;
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ Uint8Array
      const update = new Uint8Array(data.update);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º update –∫ –¥–æ–∫—É–º–µ–Ω—Ç—É (origin 'server' —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω–æ)
      Y.applyUpdate(this.ydoc, update, 'server');
    } catch (error: any) {
      // Yjs –º–æ–∂–µ—Ç –≤—ã–±—Ä–æ—Å–∏—Ç—å –æ—à–∏–±–∫—É –µ—Å–ª–∏ update —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω
      // –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ update –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –±–∞—Ç—á–∏–Ω–≥–æ–º
   */
  private sendUpdate(update: Uint8Array) {
    if (!websocketClient || !this.isActive) return;
    
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ updates
    if (!update || update.length === 0) return;
    
    // –ö–†–ò–¢–ò–ß–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Yjs update
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π Yjs update –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 2 –±–∞–π—Ç–∞
    if (update.length < 2) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º update –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –±–∞—Ç—á–∏–Ω–≥–∞
    this.pendingUpdates.push(update);
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –±–∞—Ç—á–∏–Ω–≥–∞
    if (this.updateBatchTimeout) {
      clearTimeout(this.updateBatchTimeout);
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –±–∞—Ç—á–∞
    this.updateBatchTimeout = setTimeout(() => {
      this.flushUpdates();
    }, this.UPDATE_BATCH_DELAY);
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö updates –æ–¥–Ω–∏–º –±–∞—Ç—á–µ–º
   */
  private flushUpdates() {
    if (!websocketClient || !this.isActive || this.pendingUpdates.length === 0) {
      return;
    }
    
    try {
      // –ú–µ—Ä–¥–∂–∏–º –≤—Å–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ updates –≤ –æ–¥–∏–Ω
      const mergedUpdate = Y.mergeUpdates(this.pendingUpdates);
      
      // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
      this.pendingUpdates = [];
      this.updateBatchTimeout = null;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π update
      if (mergedUpdate.length > 0) {
        this.isSyncing = true;
        this.onSyncStatus('syncing');
        
        const updateArray = Array.from(mergedUpdate);
        
        websocketClient.send({
          type: 'yjs_update',
          room_id: this.roomId,
          data: {
            noteId: this.noteId,
            update: updateArray
          }
        });
        
        // –ë—ã—Å—Ç—Ä–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ connected
        setTimeout(() => {
          if (this.isActive) {
            this.isSyncing = false;
            this.onSyncStatus('connected');
          }
        }, 100);
      }
    } catch (error) {
      console.error('[YjsSync] Error sending batched update:', error);
      this.pendingUpdates = [];
      this.updateBatchTimeout = null;
      this.isSyncing = false;
      this.onSyncStatus('error');
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ awareness update –Ω–∞ —Å–µ—Ä–≤–µ—Ä (—Å throttling)
   */
  private sendAwarenessUpdate() {
    if (!websocketClient || !this.isActive || !this.isInitialized) return;
    
    const now = Date.now();
    const timeSinceLastUpdate = now - this.lastAwarenessUpdate;
    
    // –û—á–∏—â–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (this.pendingAwarenessUpdate) {
      clearTimeout(this.pendingAwarenessUpdate);
      this.pendingAwarenessUpdate = null;
    }
    
    // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
    if (timeSinceLastUpdate >= this.awarenessThrottle) {
      this.lastAwarenessUpdate = now;
      this.doSendAwarenessUpdate();
    } else {
      // –ò–Ω–∞—á–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
      const delay = this.awarenessThrottle - timeSinceLastUpdate;
      this.pendingAwarenessUpdate = setTimeout(() => {
        this.lastAwarenessUpdate = Date.now();
        this.doSendAwarenessUpdate();
        this.pendingAwarenessUpdate = null;
      }, delay);
    }
  }
  
  /**
   * –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ awareness update
   */
  private doSendAwarenessUpdate() {
    if (!websocketClient || !this.isActive || !this.isInitialized) return;
    
    // –ö–æ–¥–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ awareness
    import('y-protocols/awareness').then(({ encodeAwarenessUpdate }) => {
      const awarenessUpdate = encodeAwarenessUpdate(this.awareness, [this.awareness.clientID]);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è awareness update –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
      if (!awarenessUpdate || awarenessUpdate.length === 0) {
        return;
      }
      
      // Awareness update –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (–º–∏–Ω–∏–º—É–º 2 –±–∞–π—Ç–∞)
      if (awarenessUpdate.length < 2) {
        return;
      }
      
      try {
        const updateArray = Array.from(awarenessUpdate);
        
        websocketClient.send({
          type: 'awareness_update',
          room_id: this.roomId,
          data: {
            noteId: this.noteId,
            update: updateArray
          }
        });
      } catch (error) {
        console.error('[YjsSync] Error sending awareness update:', error);
      }
    });
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ awareness update –æ—Ç –¥—Ä—É–≥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
   */
  private handleAwarenessUpdate(data: { noteId: string; update: number[] }) {
    if (data.noteId !== this.noteId) return;
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      if (!data.update || !Array.isArray(data.update) || data.update.length === 0) {
        return;
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ–±—Ä–∞—Ç–Ω–æ –≤ Uint8Array
      const update = new Uint8Array(data.update);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º awareness update
      import('y-protocols/awareness').then(({ applyAwarenessUpdate }) => {
        applyAwarenessUpdate(this.awareness, update, null);
      });
    } catch (error: any) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ awareness updates
    }
  }

  /**
   * –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Ü–≤–µ—Ç–∞
   */
  private hashUserId(userId: string): number {
    let hash = 0;
    for (let i = 0; i < userId.length; i++) {
      const char = userId.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ
    }
    return Math.abs(hash);
  }

  /**
   * –ë—ã—Å—Ç—Ä–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏
   */
  private hashContent(content: string): string {
    let hash = 0;
    for (let i = 0; i < content.length; i++) {
      const char = content.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return `${hash}_${content.length}`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ userId
   */
  private getUserColor(userId: string): string {
    if (!this.userColors.has(userId)) {
      const colorIndex = this.hashUserId(userId) % this.colorPalette.length;
      this.userColors.set(userId, this.colorPalette[colorIndex]);
    }
    return this.userColors.get(userId)!;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ latency
   */
  private calculateConnectionQuality(latency: number): ConnectionQuality {
    if (latency < 0) return 'offline';
    if (latency < 100) return 'excellent'; // <100ms - –æ—Ç–ª–∏—á–Ω–æ
    if (latency < 300) return 'good';      // 100-300ms - —Ö–æ—Ä–æ—à–æ
    return 'poor';                          // >300ms - –ø–ª–æ—Ö–æ
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ latency –∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
   */
  private updateLatency(latency: number) {
    this.currentLatency = latency;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.latencyHistory.push(latency);
    if (this.latencyHistory.length > this.MAX_LATENCY_HISTORY) {
      this.latencyHistory.shift();
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const avgLatency = this.latencyHistory.reduce((a, b) => a + b, 0) / this.latencyHistory.length;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const newQuality = this.calculateConnectionQuality(avgLatency);
    
    if (newQuality !== this.connectionQuality) {
      this.connectionQuality = newQuality;
      // –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - –æ–±–Ω–æ–≤–ª—è–µ–º awareness
    }
  }

  /**
   * –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ latency
   */
  private startLatencyMonitoring() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º latency –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    this.latencyCheckInterval = setInterval(() => {
      this.measureLatency();
    }, 5000);
    
    // –ü–µ—Ä–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —Å—Ä–∞–∑—É
    this.measureLatency();
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ latency
   */
  private stopLatencyMonitoring() {
    if (this.latencyCheckInterval) {
      clearInterval(this.latencyCheckInterval);
      this.latencyCheckInterval = null;
    }
  }

  /**
   * –ò–∑–º–µ—Ä–µ–Ω–∏–µ latency (–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º ping, –∂–¥–µ–º pong)
   */
  private measureLatency() {
    if (!websocketClient || !websocketClient.isConnected()) {
      this.updateLatency(-1); // offline
      return;
    }
    
    this.pingStartTime = Date.now();
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ ping —Å–æ–æ–±—â–µ–Ω–∏–µ
    websocketClient.send({
      type: 'latency_ping',
      room_id: this.roomId,
      timestamp: this.pingStartTime
    });
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ latency pong –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
   */
  private handleLatencyPong(timestamp: number) {
    if (this.pingStartTime > 0) {
      const latency = Date.now() - this.pingStartTime;
      this.updateLatency(latency);
      this.pingStartTime = 0;
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π Awareness (–∫—É—Ä—Å–æ—Ä—ã –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
   * –ö–û–ù–í–ï–†–¢–ò–†–£–ï–¢ –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ï –ü–û–ó–ò–¶–ò–ò –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
   */
  private handleAwarenessChange() {
    const states = this.awareness.getStates();
    const localClientId = this.awareness.clientID;
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—É—Ä—Å–æ—Ä—ã
    this.remoteCursors.clear();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    states.forEach((state, clientId) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫—É—Ä—Å–æ—Ä
      if (clientId === localClientId) return;
      
      const cursor = state.cursor;
      if (!cursor || !cursor.userId) return;
      
      // –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RelativePosition –≤ –∞–±—Å–æ–ª—é—Ç–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      let position: number;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ relativePosition (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
      if (cursor.relativePosition) {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ –∞–±—Å–æ–ª—é—Ç–Ω—É—é
        const absolutePosition = Y.createAbsolutePositionFromRelativePosition(
          cursor.relativePosition,
          this.ydoc
        );
        
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–∑–∏—Ü–∏—è –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—É—Ä—Å–æ—Ä
        if (!absolutePosition) {
          console.warn('[Awareness] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é:', {
            userId: cursor.userId,
            noteId: cursor.noteId
          });
          return;
        }
        
        position = absolutePosition.index;
      } else if (cursor.position !== undefined) {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (–∞–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
        position = cursor.position;
      } else {
        // –ù–µ—Ç –Ω–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        return;
      }
      
      // ‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ù–û: –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ (–±–∞–≥ "—Å–ª–µ—Ç –≤ –Ω–∞—á–∞–ª–æ")
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫—É—Ä—Å–æ—Ä—ã —Å position: 0 –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      if (position === 0 || position < 0) {
        console.warn('[Awareness] ‚ö†Ô∏è –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫—É—Ä—Å–æ—Ä:', {
          userId: cursor.userId,
          position: position,
          noteId: cursor.noteId
        });
        return;
      }
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
      let selection: { start: number; end: number } | undefined = undefined;
      if (cursor.relativeSelection) {
        const absoluteStart = Y.createAbsolutePositionFromRelativePosition(
          cursor.relativeSelection.start,
          this.ydoc
        );
        const absoluteEnd = Y.createAbsolutePositionFromRelativePosition(
          cursor.relativeSelection.end,
          this.ydoc
        );
        
        if (absoluteStart && absoluteEnd) {
          selection = {
            start: absoluteStart.index,
            end: absoluteEnd.index
          };
        }
      } else if (cursor.selection) {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        selection = cursor.selection;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const color = this.getUserColor(cursor.userId);
      
      this.remoteCursors.set(cursor.userId, {
        userId: cursor.userId,
        username: cursor.username,
        avatarUrl: cursor.avatarUrl,
        position: position,
        selection: selection,
        color,
        timestamp: Date.now(),
        noteId: this.noteId,
        connectionQuality: cursor.connectionQuality,
        latency: cursor.latency
      });
    });
    
    this.onCursorsUpdate(new Map(this.remoteCursors));
  }
  
  // handleCursorUpdate –∏ handleCursorRemove —É–¥–∞–ª–µ–Ω—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Yjs Awareness


  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É –æ–±—â–µ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫
   */
  private commonPrefixLength(str1: string, str2: string): number {
    const minLen = Math.min(str1.length, str2.length);
    for (let i = 0; i < minLen; i++) {
      if (str1[i] !== str2[i]) {
        return i;
      }
    }
    return minLen;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –¥–ª–∏–Ω—É –æ–±—â–µ–≥–æ —Å—É—Ñ—Ñ–∏–∫—Å–∞ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫
   */
  private commonSuffixLength(str1: string, str2: string, prefixLen: number): number {
    const maxLen = Math.min(str1.length - prefixLen, str2.length - prefixLen);
    for (let i = 0; i < maxLen; i++) {
      if (str1[str1.length - 1 - i] !== str2[str2.length - 1 - i]) {
        return i;
      }
    }
    return maxLen;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
   * –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
   */
  public updateContent(newContent: string) {
    if (!this.isActive || !this.isInitialized) return;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º pending –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    this.pendingContentUpdate = newContent;
    
    // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (this.contentUpdateTimeout) {
      clearTimeout(this.contentUpdateTimeout);
    }
    
    // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞—Ç—á–∏–Ω–≥–∞ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –ø–µ—á–∞—Ç–∏
    // 30ms –¥–ª—è desktop (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å), 50ms –¥–ª—è mobile
    const delay = this.isMobile ? 50 : 30;
    
    this.contentUpdateTimeout = setTimeout(() => {
      this.applyContentUpdate();
    }, delay);
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private applyContentUpdate() {
    if (!this.pendingContentUpdate || !this.isActive || !this.isInitialized) {
      return;
    }
    
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è - –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    if (this.updateInProgress) {
      return;
    }
    
    const newContent = this.pendingContentUpdate;
    this.pendingContentUpdate = null;
    
    const currentContent = this.ytext.toString();
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (newContent === currentContent) {
      return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É–º–Ω—ã–π diff: –Ω–∞—Ö–æ–¥–∏–º –æ–±—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å –∏ —Å—É—Ñ—Ñ–∏–∫—Å
    const prefixLen = this.commonPrefixLength(currentContent, newContent);
    const suffixLen = this.commonSuffixLength(currentContent, newContent, prefixLen);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ –≤—Å—Ç–∞–≤–∏—Ç—å
    const deleteStart = prefixLen;
    const deleteLen = currentContent.length - prefixLen - suffixLen;
    const insertText = newContent.substring(prefixLen, newContent.length - suffixLen);
    
    // –ù–µ –ø—Ä–∏–º–µ–Ω—è–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if (deleteLen === 0 && insertText.length === 0) {
      return;
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
    this.updateInProgress = true;
    
    try {
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –∫ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–π —á–∞—Å—Ç–∏
      // transact –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      this.ydoc.transact(() => {
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if (deleteLen > 0) {
          this.ytext.delete(deleteStart, deleteLen);
        }
        
        // –ü–æ—Ç–æ–º –≤—Å—Ç–∞–≤–ª—è–µ–º (–µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –≤—Å—Ç–∞–≤–∏—Ç—å)
        if (insertText.length > 0) {
          this.ytext.insert(deleteStart, insertText);
        }
      }, 'local'); // –£–∫–∞–∑—ã–≤–∞–µ–º origin 'local' –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ UndoManager
      
      // Yjs –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç update event, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      // —á–µ—Ä–µ–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ydoc.on('update') –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
    } finally {
      // –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      this.updateInProgress = false;
    }
  }


  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∫—É—Ä—Å–æ—Ä–∞ —á–µ—Ä–µ–∑ Yjs Awareness (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
   * –ò–°–ü–û–õ–¨–ó–£–ï–¢ –û–¢–ù–û–°–ò–¢–ï–õ–¨–ù–´–ï –ü–û–ó–ò–¶–ò–ò –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
   */
  public updateCursor(position: number, selection?: { start: number; end: number }, userId?: string, username?: string, avatarUrl?: string) {
    if (!this.isActive) return;
    
    // –ï—Å–ª–∏ position === -1, —ç—Ç–æ –∑–Ω–∞—á–∏—Ç —É–±—Ä–∞—Ç—å –∫—É—Ä—Å–æ—Ä (blur)
    if (position === -1) {
      // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ awareness
      this.awareness.setLocalStateField('cursor', null);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
      this.lastCursorPosition = -1;
      this.lastCursorSelection = undefined;
      return;
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤–æ–æ–±—â–µ –ø–æ–∑–∏—Ü–∏—è –∫—É—Ä—Å–æ—Ä–∞
    const selectionChanged = this.hasSelectionChanged(selection);
    const positionChanged = position !== this.lastCursorPosition;
    
    if (!positionChanged && !selectionChanged) {
      // –ü–æ–∑–∏—Ü–∏—è –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
      return;
    }
    
    // Throttling –¥–ª—è cursor updates
    const now = Date.now();
    if (now - this.lastCursorUpdate < this.cursorThrottle) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑-–∑–∞ throttle
      return;
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.lastCursorPosition = position;
    this.lastCursorSelection = selection ? { ...selection } : undefined;
    this.lastCursorUpdate = now;
    
    // –ö–õ–Æ–ß–ï–í–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ Yjs
    // RelativePosition –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ/—É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    const relativePosition = Y.createRelativePositionFromTypeIndex(this.ytext, position);
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    let relativeSelection: { start: Y.RelativePosition; end: Y.RelativePosition } | undefined = undefined;
    if (selection) {
      const relativeStart = Y.createRelativePositionFromTypeIndex(this.ytext, selection.start);
      const relativeEnd = Y.createRelativePositionFromTypeIndex(this.ytext, selection.end);
      relativeSelection = {
        start: relativeStart,
        end: relativeEnd
      };
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ awareness —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    // Awareness –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    this.awareness.setLocalStateField('cursor', {
      userId: userId || 'unknown',
      username,
      avatarUrl,
      relativePosition,        // –ò–°–ü–û–õ–¨–ó–£–ï–ú RelativePosition –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞
      relativeSelection,       // –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
      noteId: this.noteId,
      timestamp: now,
      connectionQuality: this.connectionQuality,
      latency: Math.round(this.currentLatency)
    });
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
   */
  private hasSelectionChanged(selection?: { start: number; end: number }): boolean {
    // –û–±–∞ undefined - –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (!selection && !this.lastCursorSelection) {
      return false;
    }
    
    // –û–¥–Ω–æ –µ—Å—Ç—å, –¥—Ä—É–≥–æ–≥–æ –Ω–µ—Ç - –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if (!selection || !this.lastCursorSelection) {
      return true;
    }
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    return selection.start !== this.lastCursorSelection.start || 
           selection.end !== this.lastCursorSelection.end;
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
   */
  public async forceSync() {
    // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂—É—é –≤–µ—Ä—Å–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞
    await this.requestSync();
  }

  /**
   * –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ (Ctrl+Z)
   */
  public undo(): boolean {
    if (!this.isActive || !this.isInitialized) {
      return false;
    }
    const result = this.undoManager.undo();
    return result !== null;
  }

  /**
   * –í–µ—Ä–Ω—É—Ç—å –æ—Ç–º–µ–Ω—ë–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (Ctrl+Y / Ctrl+Shift+Z)
   */
  public redo(): boolean {
    if (!this.isActive || !this.isInitialized) {
      return false;
    }
    const result = this.undoManager.redo();
    return result !== null;
  }

  /**
   * –ú–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å?
   */
  public canUndo(): boolean {
    return this.undoManager.canUndo();
  }

  /**
   * –ú–æ–∂–Ω–æ –ª–∏ –≤–µ—Ä–Ω—É—Ç—å?
   */
  public canRedo(): boolean {
    return this.undoManager.canRedo();
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
   */
  public getContent(): string {
    return this.ytext.toString();
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é Undo/Redo
   */
  public clearUndoHistory(): void {
    this.undoManager.clear();
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞
   */
  public destroy() {
    this.isActive = false;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è updates –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    if (this.updateBatchTimeout) {
      clearTimeout(this.updateBatchTimeout);
      this.updateBatchTimeout = null;
    }
    this.flushUpdates();
    
    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ awareness (–∫—É—Ä—Å–æ—Ä)
    this.awareness.setLocalState(null);
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ–º awareness
    this.awareness.destroy();
    
    // –§–ª–∞—à–∏–º –∏ —É–Ω–∏—á—Ç–æ–∂–∞–µ–º –±–∞—Ç—á–µ—Ä
    if (this.cursorBatcher) {
      this.cursorBatcher.flush();
      this.cursorBatcher.destroy();
      this.cursorBatcher = null;
    }
    
    // –û—á–∏—â–∞–µ–º pending –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (this.contentUpdateTimeout) {
      clearTimeout(this.contentUpdateTimeout);
      this.contentUpdateTimeout = null;
    }
    this.pendingContentUpdate = null;
    
    // –û—á–∏—â–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ awareness –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    if (this.pendingAwarenessUpdate) {
      clearTimeout(this.pendingAwarenessUpdate);
      this.pendingAwarenessUpdate = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ latency
    this.stopLatencyMonitoring();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
    this.lastCursorPosition = -1;
    this.lastCursorSelection = undefined;
    this.lastCursorUpdate = 0;
    
    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å updates
    this.pendingUpdates = [];
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º IndexedDB –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    if (this.indexeddbProvider) {
      this.indexeddbProvider.destroy();
      this.indexeddbProvider = null;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebRTC –ø—Ä–æ–≤–∞–π–¥–µ—Ä
    if (this.webrtcProvider) {
      this.webrtcProvider.destroy();
      this.webrtcProvider = null;
      console.log('[WebRTC] üîå Provider closed');
    }
    
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π
    if (websocketClient && this.messageHandler) {
      websocketClient.offMessage('yjs_sync', this.messageHandler);
      websocketClient.offMessage('yjs_update', this.messageHandler);
      websocketClient.offMessage('awareness_update', this.messageHandler);
      // cursor_update –∏ cursor_remove –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
      websocketClient.offMessage('note_saved', this.messageHandler);
      websocketClient.offMessage('reconnected', this.messageHandler);
    }
    
    // –û—á–∏—â–∞–µ–º Undo Manager
    this.undoManager.clear();
    this.undoManager.destroy();
    
    // –û—á–∏—â–∞–µ–º Yjs –¥–æ–∫—É–º–µ–Ω—Ç
    this.ydoc.destroy();
    
    this.remoteCursors.clear();
  }
}

