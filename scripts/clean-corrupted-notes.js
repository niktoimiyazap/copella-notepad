// –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ —Å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º–∏
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function cleanCorruptedNotes() {
  try {
    console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏...\n');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
    const notes = await prisma.note.findMany({
      select: {
        id: true,
        title: true,
        content: true,
        roomId: true,
        updatedAt: true,
      },
    });

    console.log(`üìù –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: ${notes.length}\n`);

    const problematicNotes = [];

    for (const note of notes) {
      if (!note.content) continue;

      const contentLength = note.content.length;
      const issues = [];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ–ª—å—à–µ 50KB
      if (contentLength > 50000) {
        issues.push(`–û–≥—Ä–æ–º–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${Math.round(contentLength / 1024)}KB`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã
      const duplicatePatterns = [
        /(<div><div>){3,}/i,
        /(<br\s*\/?>\s*){10,}/i,
        /(.{10,})\1{3,}/,
        /\/nbsp;/g,
        /\blt;/g,
        /\bbsp;/g,
        /&n–øbsp;/g,
      ];

      for (const pattern of duplicatePatterns) {
        const matches = note.content.match(pattern);
        if (matches) {
          issues.push(`–ù–∞–π–¥–µ–Ω—ã –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã: ${pattern.toString()}`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∫ —Ç–µ–∫—Å—Ç—É
      const tagsCount = (note.content.match(/<[^>]+>/g) || []).length;
      const textLength = note.content.replace(/<[^>]+>/g, '').length;
      if (tagsCount > textLength) {
        issues.push(`–ë–æ–ª—å—à–µ —Ç–µ–≥–æ–≤ —á–µ–º —Ç–µ–∫—Å—Ç–∞ (${tagsCount} —Ç–µ–≥–æ–≤, ${textLength} —Å–∏–º–≤–æ–ª–æ–≤)`);
      }

      if (issues.length > 0) {
        problematicNotes.push({
          ...note,
          contentLength,
          issues,
        });
      }
    }

    if (problematicNotes.length === 0) {
      console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
      return;
    }

    console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫: ${problematicNotes.length}\n`);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    for (const note of problematicNotes) {
      console.log(`üìå –ó–∞–º–µ—Ç–∫–∞: "${note.title}"`);
      console.log(`   ID: ${note.id}`);
      console.log(`   –†–∞–∑–º–µ—Ä: ${Math.round(note.contentLength / 1024)}KB`);
      console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–∞: ${note.updatedAt.toLocaleString()}`);
      console.log(`   –ü—Ä–æ–±–ª–µ–º—ã:`);
      note.issues.forEach((issue) => console.log(`     - ${issue}`));
      console.log(`   –ü—Ä–µ–≤—å—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${note.content.substring(0, 200)}...`);
      console.log('');
    }

    // –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
    console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫...\n');

    for (const note of problematicNotes) {
      // –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      let cleanedContent = note.content;

      // –£–±–∏—Ä–∞–µ–º –ø–æ–ª–æ–º–∞–Ω–Ω—ã–µ HTML-—Å—É—â–Ω–æ—Å—Ç–∏
      cleanedContent = cleanedContent.replace(/\/nbsp;/g, ' ');
      cleanedContent = cleanedContent.replace(/<\/nbsp;>/g, ' ');
      cleanedContent = cleanedContent.replace(/\blt;/g, '');
      cleanedContent = cleanedContent.replace(/\bgt;/g, '');
      cleanedContent = cleanedContent.replace(/\bbsp;/g, ' ');
      cleanedContent = cleanedContent.replace(/\/gt;/g, '');
      cleanedContent = cleanedContent.replace(/\/lt;/g, '');
      cleanedContent = cleanedContent.replace(/\/amp;/g, '&');
      cleanedContent = cleanedContent.replace(/&n–øbsp;/g, ' ');
      cleanedContent = cleanedContent.replace(/&n–±sp;/g, ' ');

      // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
      cleanedContent = cleanedContent.replace(/\s{3,}/g, ' ');

      // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ < –∏–ª–∏ >
      cleanedContent = cleanedContent.replace(/(<\s*){2,}/g, '');
      cleanedContent = cleanedContent.replace(/(>\s*){2,}/g, '');

      // –£–±–∏—Ä–∞–µ–º HTML-–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
      cleanedContent = cleanedContent.replace(/<!--[\s\S]*?-->/g, '');

      // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏
      cleanedContent = cleanedContent.replace(/<div>\s*<\/div>/gi, '');
      cleanedContent = cleanedContent.replace(/<span>\s*<\/span>/gi, '');

      // –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ <br>
      cleanedContent = cleanedContent.replace(/(<br\s*\/?>\s*){3,}/gi, '<br><br>');

      // –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—Å–µ –µ—â–µ –æ–≥—Ä–æ–º–Ω—ã–π (–±–æ–ª—å—à–µ 100KB), –æ–±—Ä–µ–∑–∞–µ–º
      if (cleanedContent.length > 100000) {
        console.log(`   ‚ö†Ô∏è  –ö–æ–Ω—Ç–µ–Ω—Ç –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ–±—Ä–µ–∑–∞–µ–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞...`);
        cleanedContent = cleanedContent.substring(0, 50000) + '\n\n[–ö–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞]';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫—É
      await prisma.note.update({
        where: { id: note.id },
        data: {
          content: cleanedContent,
          updatedAt: new Date(),
        },
      });

      console.log(`‚úÖ –ó–∞–º–µ—Ç–∫–∞ "${note.title}" –æ—á–∏—â–µ–Ω–∞`);
      console.log(`   –ë—ã–ª–æ: ${Math.round(note.contentLength / 1024)}KB`);
      console.log(`   –°—Ç–∞–ª–æ: ${Math.round(cleanedContent.length / 1024)}KB\n`);
    }

    console.log('‚ú® –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

cleanCorruptedNotes();

